name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          allowed_bots: "claude"

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request with focus on the following areas:
            
            ## SOLID Principles Compliance
            - **Single Responsibility**: Each component/module should have one clear purpose
            - **Open/Closed**: Code should be extensible without modification
            - **Liskov Substitution**: Components should be interchangeable with their abstractions
            - **Interface Segregation**: Avoid forcing dependencies on unused interfaces
            - **Dependency Inversion**: Depend on abstractions, not concrete implementations
            
            ## Next.js Best Practices
            - **Performance**: Code splitting, image optimization, proper use of SSR/SSG/ISR
            - **Data Fetching**: Server-side fetching preference, proper caching strategies
            - **Routing**: Proper use of app directory, middleware, error handling
            - **React Patterns**: Server Components usage, state management, component composition
            - **SEO & Accessibility**: Semantic HTML, meta tags, ARIA labels, keyboard navigation
            
            ## General Code Quality
            - **Security**: Input validation, environment variables, API protection
            - **Type Safety**: Proper TypeScript usage and type definitions
            - **Error Handling**: Comprehensive error boundaries and user feedback
            - **Testing**: Adequate test coverage for critical paths
            - **Code Organization**: Clear file structure and naming conventions
            
            Please provide specific, actionable feedback with code examples where applicable.
            Be constructive and educational, especially for SOLID principle violations.

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

